syntax = "proto2";
import "google/protobuf/timestamp.proto";

import "scalapb/scalapb.proto";
option(scalapb.options) = {
    flat_package: true
};
package com.wincom.dcim.message.signal;

import "com/wincom/dcim/message/common.proto";

enum SignalType {
    AI = 0;
    DI = 1;
    SI = 2;
    AO = 3;
    DO = 4;
    SO = 5;
};

// value objects
message TransFuncVo {
    option (scalapb.message).extends = "com.wincom.dcim.message.common.ValueObject";
    required string name = 1;
    map<string, string> params = 2;
};

message SignalVo {
    option (scalapb.message).extends = "com.wincom.dcim.message.common.ValueObject";
    required string signalId = 1;
    required string name = 2;
    required SignalType signalType = 3;
    required string driverId = 4;
    required string key = 5;
    repeated TransFuncVo funcs = 6 [(scalapb.field).collection_type="Seq"];
};

message SignalValueVo {
    option (scalapb.message).extends = "com.wincom.dcim.message.common.SignalValue";
    required SignalType signalType = 1;
    optional bool digitalValue = 2;
    optional double analogValue = 3;
    optional string stringValue = 4;
};

message SignalSnapshotValueVo {
    option (scalapb.message).extends = "com.wincom.dcim.message.common.ValueObject";
    required string signalId = 1;
    required google.protobuf.Timestamp ts = 2;
    required SignalValueVo value = 3;
};

message SupportedFuncsVo {
    option (scalapb.message).extends = "com.wincom.dcim.message.common.ValueObject";
    map<string, string> funcNames = 1;
};

message FuncParamsVo {
    option (scalapb.message).extends = "com.wincom.dcim.message.common.ValueObject";
    repeated com.wincom.dcim.message.common.ParamMeta paramOptions = 1 [(scalapb.field).collection_type="Seq"];
};

// configuration commands
message CreateSignalCmd {
    option (scalapb.message).extends = "com.wincom.dcim.message.signal.Command";
    required string signalId = 1;
    optional string user = 2;
    required string name = 3;
    required SignalType signalType = 4;
    required string driverId = 5;
    required string key = 6;
    repeated TransFuncVo funcs = 7 [(scalapb.field).collection_type="Seq"];
};

message RenameSignalCmd {
    option (scalapb.message).extends = "com.wincom.dcim.message.signal.Command";
    required string signalId = 1;
    optional string user = 2;
    required string newName = 3;
};

message SelectDriverCmd {
    option (scalapb.message).extends = "com.wincom.dcim.message.signal.Command";
    required string signalId = 1;
    optional string user = 2;
    required string driverId = 3;
};

message SelectTypeCmd {
    option (scalapb.message).extends = "com.wincom.dcim.message.signal.Command";
    required string signalId = 1;
    optional string user = 2;
    required SignalType newType = 3;
};

message SelectKeyCmd {
    option (scalapb.message).extends = "com.wincom.dcim.message.signal.Command";
    required string signalId = 1;
    optional string user = 2;
    required string key = 3;
};

message UpdateFuncsCmd {
    option (scalapb.message).extends = "com.wincom.dcim.message.signal.Command";
    required string signalId = 1;
    optional string user = 2;
    repeated TransFuncVo funcs = 3 [(scalapb.field).collection_type="Seq"];
};

message SaveSnapshotCmd {
    option (scalapb.message).extends = "com.wincom.dcim.message.signal.Command";
    required string signalId = 1;
    optional string user = 2;
};

// transient commands
message RetrieveSignalCmd {
    option (scalapb.message).extends = "com.wincom.dcim.message.signal.Command";
    required string signalId = 1;
    optional string user = 2;
};

message UpdateValueCmd {
    option (scalapb.message).extends = "com.wincom.dcim.message.signal.Command";
    required string signalId = 1;
    optional string user = 2;
    required SignalSnapshotValueVo value = 3;
};

message SetValueCmd {
    option (scalapb.message).extends = "com.wincom.dcim.message.signal.Command";
    required string signalId = 1;
    optional string user = 2;
    required SignalValueVo value = 3;
};

message SetValueRsp {
    option (scalapb.message).extends = "com.wincom.dcim.message.common.ValueObject";
    required com.wincom.dcim.message.common.ResponseType status = 1;
    optional string result = 2;
};

message GetValueCmd {
    option (scalapb.message).extends = "com.wincom.dcim.message.signal.Command";
    required string signalId = 1;
    optional string user = 2;
};

message StartSignalCmd {
    option (scalapb.message).extends = "com.wincom.dcim.message.signal.Command";
    required string signalId = 1;
    optional string user = 2;
};

message StopSignalCmd {
    option (scalapb.message).extends = "com.wincom.dcim.message.signal.Command";
    required string signalId = 1;
    optional string user = 2;
};

message DeleteSignalCmd {
    option (scalapb.message).extends = "com.wincom.dcim.message.signal.Command";
    required string signalId = 1;
    optional string user = 2;
};

message GetSupportedFuncsCmd {
    option(scalapb.message).extends = "com.wincom.dcim.message.common.ValueObject";
};

message GetFuncParamsCmd {
    option(scalapb.message).extends = "com.wincom.dcim.message.common.ValueObject";
    required string funcName = 3;
};

// persistent events
message CreateSignalEvt {
    option (scalapb.message).extends = "com.wincom.dcim.message.common.Event";
    optional string user = 1;
    required string name = 2;
    required SignalType signalType = 3;
    required string driverId = 4;
    required string key = 5;
    repeated TransFuncPo funcs = 6 [(scalapb.field).collection_type="Seq"];
};

message RenameSignalEvt {
    option (scalapb.message).extends = "com.wincom.dcim.message.common.Event";
    optional string user = 1;
    required string newName = 2;
};

message SelectDriverEvt {
    option (scalapb.message).extends = "com.wincom.dcim.message.common.Event";
   optional string user = 1;
    required string driverId = 2;
};

message SelectTypeEvt {
    option (scalapb.message).extends = "com.wincom.dcim.message.common.Event";
    optional string user = 1;
    required SignalType newType = 2;
};

message SelectKeyEvt {
    option (scalapb.message).extends = "com.wincom.dcim.message.common.Event";
    optional string user = 1;
    required string key = 2;
};

message DeleteSignalEvt {
    option (scalapb.message).extends = "com.wincom.dcim.message.common.Event";
    optional string user = 1;
};

message UpdateFuncsEvt {
    option (scalapb.message).extends = "com.wincom.dcim.message.common.Event";
    optional string user = 1;
    repeated TransFuncPo funcs = 2 [(scalapb.field).collection_type="Seq"];
};

// persistent objects
message TransFuncPo {
    option (scalapb.message).extends = "com.wincom.dcim.message.common.ValueObject";
    required string name = 1;
    map<string, string> params = 2;
};

message SignalPo {
    option (scalapb.message).extends = "com.wincom.dcim.message.common.ValueObject";
    required string name = 1;
    required SignalType signalType = 2;
    required string driverId = 3;
    required string key = 4;
    repeated TransFuncPo funcs = 5 [(scalapb.field).collection_type="Seq"];
};


